{"version":3,"sources":["../src/query_ctrl.js"],"names":["GenericDatasourceQueryCtrl","$scope","$injector","scope","target","type","parameters","query","datasource","metricFindQuery","rawQuery","console","log","panelCtrl","refresh","that","data","getParameterKeys","then","parameterArray","forEach","element","finally","onChangeInternal","indexOfQueryParams","indexOf","substring","concat","i","length","parameter","QueryCtrl","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.target.target = this.target.target || 'select metric';\n    this.target.type = this.target.type || 'timeserie';\n    // the available parameters for the given webservice\n    this.target.parameters = [];\n\n  }\n\n  getOptions(query) {\n\n    // console.log(this.datasource.metricFindQuery(query || ''));\n\n    return this.datasource.metricFindQuery(query || '');\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal() {\n    console.log(\"ON CHANGE INTERNAL\")\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n  onChangeTarget() {\n\n    this.target.parameters = [];\n\n    var that = this;\n\n    let data = this.datasource.getParameterKeys(this.target.target);\n    let parameters = data.then(function(parameterArray) {\n\n      parameterArray.forEach(element => {\n        element['value'] = null;\n      });\n      \n      that.target.parameters = parameterArray;\n      console.log(that.target.parameters);\n      \n    }).finally(function(parameterArray) {\n      that.onChangeInternal();\n    });\n  }\n\n  onChangeTargetParameters() {\n    console.log(\"onChangeTargetParameters\");\n    console.log(this.target.parameters);\n    console.log(\"Before updating the target\");\n    console.log(this.target.target);\n\n    // clear the previous query parameter list\n\n    let indexOfQueryParams = this.target.target.indexOf('?')\n    // if there are parameters\n    if (indexOfQueryParams >= 0) {\n      this.target.target = this.target.target.substring(0, indexOfQueryParams);\n    }\n\n    this.target.target = this.target.target.concat('?');\n\n    for (let i = 0; i < this.target.parameters.length; i++) {\n      let parameter = this.target.parameters[i];\n\n      if (parameter['value'] === null || parameter['value'] === '') {\n        continue;\n      }\n\n      this.target.target = this.target.target.concat(\n        parameter['key'] + '=' + parameter['value']\n      )\n\n      if (i !== this.target.parameters.length - 1) {\n        this.target.target = this.target.target.concat('&');\n      }\n\n    }\n\n    console.log(\"After updating the target\");\n    console.log(this.target.target);\n\n    console.log(\"all targets\");\n    console.log(this.target);\n\n    this.onChangeInternal();\n\n  }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}