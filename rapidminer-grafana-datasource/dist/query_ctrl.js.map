{"version":3,"sources":["../src/query_ctrl.js"],"names":["GenericDatasourceQueryCtrl","$scope","$injector","scope","target","type","params","query","datasource","metricFindQuery","rawQuery","panelCtrl","refresh","that","data","getParameterKeys","parameters","then","value","console","log","setTimeout","onChangeInternal","QueryCtrl","templateUrl"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;IAEaA,0B,WAAAA,0B;;;AAEX,sCAAYC,MAAZ,EAAoBC,SAApB,EAAgC;AAAA;;AAAA,wJACxBD,MADwB,EAChBC,SADgB;;AAG9B,UAAKC,KAAL,GAAaF,MAAb;AACA,UAAKG,MAAL,CAAYA,MAAZ,GAAqB,MAAKA,MAAL,CAAYA,MAAZ,IAAsB,eAA3C;AACA,UAAKA,MAAL,CAAYC,IAAZ,GAAmB,MAAKD,MAAL,CAAYC,IAAZ,IAAoB,WAAvC;AACA;AACA,UAAKD,MAAL,CAAYE,MAAZ,GAAqB,EAArB;;AAP8B;AAS/B;;;;+BAEUC,K,EAAO;AAChB,aAAO,KAAKC,UAAL,CAAgBC,eAAhB,CAAgCF,SAAS,EAAzC,CAAP;AACD;;;uCAEkB;AACjB,WAAKH,MAAL,CAAYM,QAAZ,GAAuB,CAAC,KAAKN,MAAL,CAAYM,QAApC;AACD;;;uCAEkB;AACjB,WAAKC,SAAL,CAAeC,OAAf,GADiB,CACS;AAC3B;;;qCAEgB;AAAA;;AAGf,UAAIC,OAAO,IAAX;;AAEA,UAAIC,OAAO,KAAKN,UAAL,CAAgBO,gBAAhB,CAAiC,KAAKX,MAAL,CAAYA,MAA7C,CAAX;AACA;AACA,UAAIY,aAAaF,KAAKG,IAAL,CAAU,UAASC,KAAT,EAAgB;AACzC;AACA;AACA;AACA;AACA;;AAEAL,aAAKT,MAAL,CAAYE,MAAZ,GAAqBY,KAArB;AAED,OATgB,CAAjB;AAUA;AACAC,cAAQC,GAAR,CAAY,KAAKhB,MAAL,CAAYE,MAAxB;AACAe,iBAAW,YAAM;AACfF,gBAAQC,GAAR,CAAY,OAAKhB,MAAL,CAAYE,MAAxB;AACD,OAFD,EAEG,IAFH;;AAIA,WAAKgB,gBAAL;AAED;;;;EAlD6CC,c;;AAsDhDvB,2BAA2BwB,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.target.target = this.target.target || 'select metric';\n    this.target.type = this.target.type || 'timeserie';\n    // the available parameters for the given webservice\n    this.target.params = [];\n\n  }\n\n  getOptions(query) {\n    return this.datasource.metricFindQuery(query || '');\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n  onChangeTarget() {\n\n\n    var that = this;\n\n    let data = this.datasource.getParameterKeys(this.target.target);\n    // 'data' is a Promise\n    let parameters = data.then(function(value) {\n      // 'value' is an array\n      // let params = [];\n      // value.forEach(parameter => {\n      //   params.push(parameter);\n      // });\n      \n      that.target.params = value;\n      \n    });\n    // this.target.params = parameters.then();\n    console.log(this.target.params );\n    setTimeout(() => {\n      console.log(this.target.params );\n    }, 1000);\n    \n    this.onChangeInternal();\n\n  }\n\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}